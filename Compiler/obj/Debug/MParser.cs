//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\mariusg\Documents\Visual Studio 2013\Projects\Compiler\Compiler\Parser\Antlr\MParser.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Compiler.Parser.Antlr {
 
	using Compiler.SyntaxTree; 

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class MParser : Parser {
	public const int
		Double=9, StringConstant=42, Mod=32, Bool=12, Void=2, GreaterEqual=24, 
		RightBracket=20, False=14, LineComment=45, IntegerConstant=40, LessEqual=22, 
		While=11, NotEqual=26, AndAnd=33, Equal=25, DoubleConstant=41, For=6, 
		Identifier=39, Int=3, Plus=27, Minus=28, Assign=38, Semi=36, Break=1, 
		Comment=44, New=8, Less=21, LeftBrace=17, Not=35, LeftBracket=19, OrOr=34, 
		StarStar=30, String=10, LeftParen=15, Star=29, Return=7, True=13, RightParen=16, 
		Whitespace=43, Else=5, Comma=37, If=4, Greater=23, Div=31, RightBrace=18;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'break'", "'void'", "'int'", "'if'", "'else'", "'for'", 
		"'return'", "'new'", "'double'", "'string'", "'while'", "'bool'", "'true'", 
		"'false'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'+'", "'-'", "'*'", "'**'", "'/'", "'%'", "'&&'", 
		"'||'", "'!'", "';'", "','", "'='", "Identifier", "IntegerConstant", "DoubleConstant", 
		"StringConstant", "Whitespace", "Comment", "LineComment"
	};
	public const int
		RULE_program = 0, RULE_functionDecleration = 1, RULE_parameters = 2, RULE_variableDecleration = 3, 
		RULE_variable = 4, RULE_type = 5, RULE_primitiveType = 6, RULE_statementOrBlock = 7, 
		RULE_statementBlock = 8, RULE_statement = 9, RULE_ifStatement = 10, RULE_whileStatement = 11, 
		RULE_forStatement = 12, RULE_returnStatement = 13, RULE_breakStatement = 14, 
		RULE_expression = 15, RULE_coreExpression = 16, RULE_creator = 17, RULE_creatorSizes = 18, 
		RULE_functionCall = 19, RULE_arguments = 20, RULE_constant = 21;
	public static readonly string[] ruleNames = {
		"program", "functionDecleration", "parameters", "variableDecleration", 
		"variable", "type", "primitiveType", "statementOrBlock", "statementBlock", 
		"statement", "ifStatement", "whileStatement", "forStatement", "returnStatement", 
		"breakStatement", "expression", "coreExpression", "creator", "creatorSizes", 
		"functionCall", "arguments", "constant"
	};

	public override string GrammarFileName { get { return "MParser.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ProgramNode programNode;
		public FunctionDeclerationContext _functionDecleration;
		public ITerminalNode Eof() { return GetToken(MParser.Eof, 0); }
		public IReadOnlyList<FunctionDeclerationContext> functionDecleration() {
			return GetRuleContexts<FunctionDeclerationContext>();
		}
		public FunctionDeclerationContext functionDecleration(int i) {
			return GetRuleContext<FunctionDeclerationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		_localctx.programNode =  nodeFactory.CreateProgramNode(_localctx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 44; _localctx._functionDecleration = functionDecleration();
				_localctx.programNode.Functions.Add(_localctx._functionDecleration.func);
				}
				}
				State = 49;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Void) | (1L << Int) | (1L << Double) | (1L << String) | (1L << Bool))) != 0) );
			State = 51; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclerationContext : ParserRuleContext {
		public FunctionDecleration func;
		public IToken _Identifier;
		public ParametersContext _parameters;
		public StatementBlockContext _statementBlock;
		public TypeContext _type;
		public ITerminalNode LeftParen() { return GetToken(MParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(MParser.RightParen, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ITerminalNode Void() { return GetToken(MParser.Void, 0); }
		public FunctionDeclerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecleration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterFunctionDecleration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitFunctionDecleration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecleration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclerationContext functionDecleration() {
		FunctionDeclerationContext _localctx = new FunctionDeclerationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_functionDecleration);
		try {
			State = 83;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; Match(Void);
				State = 54; _localctx._Identifier = Match(Identifier);
				State = 55; Match(LeftParen);
				State = 56; _localctx._parameters = parameters();
				State = 57; Match(RightParen);
				State = 58; _localctx._statementBlock = statementBlock();
				 _localctx.func =  nodeFactory.CreateVoidFunctionDecleration(_localctx, (_localctx._Identifier!=null?_localctx._Identifier.Text:null), _localctx._parameters.vars, _localctx._statementBlock.stmts); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61; Match(Void);
				State = 62; _localctx._Identifier = Match(Identifier);
				State = 63; Match(LeftParen);
				State = 64; Match(RightParen);
				State = 65; _localctx._statementBlock = statementBlock();
				 _localctx.func =  nodeFactory.CreateVoidFunctionDecleration(_localctx, (_localctx._Identifier!=null?_localctx._Identifier.Text:null), new List<VariableNode>(), _localctx._statementBlock.stmts); 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; _localctx._type = type(0);
				State = 69; _localctx._Identifier = Match(Identifier);
				State = 70; Match(LeftParen);
				State = 71; _localctx._parameters = parameters();
				State = 72; Match(RightParen);
				State = 73; _localctx._statementBlock = statementBlock();
				 _localctx.func =  nodeFactory.CreateReturningFunctionDecleration(_localctx, (_localctx._Identifier!=null?_localctx._Identifier.Text:null), _localctx._parameters.vars, _localctx._statementBlock.stmts, _localctx._type.typeNode); 
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 76; _localctx._type = type(0);
				State = 77; _localctx._Identifier = Match(Identifier);
				State = 78; Match(LeftParen);
				State = 79; Match(RightParen);
				State = 80; _localctx._statementBlock = statementBlock();
				 _localctx.func =  nodeFactory.CreateReturningFunctionDecleration(_localctx, (_localctx._Identifier!=null?_localctx._Identifier.Text:null), new List<VariableNode>(), _localctx._statementBlock.stmts, _localctx._type.typeNode); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public List<VariableNode> vars;
		public VariableContext first;
		public VariableContext _variable;
		public IReadOnlyList<VariableContext> variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode Comma(int i) {
			return GetToken(MParser.Comma, i);
		}
		public IReadOnlyList<ITerminalNode> Comma() { return GetTokens(MParser.Comma); }
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_parameters);
		 _localctx.vars =  new List<VariableNode>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; _localctx.first = _localctx._variable = variable();
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Comma) {
				{
				{
				State = 86; Match(Comma);
				State = 87; _localctx._variable = variable();
				 _localctx.vars.Add(_localctx._variable.var); 
				}
				}
				State = 94;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			 _localctx.vars.Add(_localctx.first.var); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclerationContext : ParserRuleContext {
		public VariableDecleration decleration;
		public VariableContext _variable;
		public ExpressionContext _expression;
		public ITerminalNode Semi() { return GetToken(MParser.Semi, 0); }
		public ITerminalNode Assign() { return GetToken(MParser.Assign, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDecleration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterVariableDecleration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitVariableDecleration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDecleration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclerationContext variableDecleration() {
		VariableDeclerationContext _localctx = new VariableDeclerationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_variableDecleration);
		try {
			State = 107;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97; _localctx._variable = variable();
				State = 98; Match(Assign);
				State = 99; _localctx._expression = expression(0);
				State = 100; Match(Semi);
				 _localctx.decleration =  nodeFactory.CreateInitializedVariableDecleration(_localctx, _localctx._variable.var, _localctx._expression.expr); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; _localctx._variable = variable();
				State = 104; Match(Semi);
				 _localctx.decleration =  nodeFactory.CreateUnInitializedVariableDecleration(_localctx, _localctx._variable.var); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public VariableNode var;
		public TypeContext _type;
		public IToken _Identifier;
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; _localctx._type = type(0);
			State = 110; _localctx._Identifier = Match(Identifier);
			 _localctx.var =  nodeFactory.CreateVariableNode(_localctx, _localctx._type.typeNode, nodeFactory.CreateVariableIdNode(_localctx, (_localctx._Identifier!=null?_localctx._Identifier.Text:null))); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNode typeNode;
		public TypeContext t;
		public PrimitiveTypeContext _primitiveType;
		public ITerminalNode RightBracket() { return GetToken(MParser.RightBracket, 0); }
		public ITerminalNode LeftBracket() { return GetToken(MParser.LeftBracket, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(_ctx, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 114; _localctx._primitiveType = primitiveType();
			 _localctx.typeNode =  nodeFactory.CreateTypeNode(_localctx, _localctx._primitiveType.primitive); 
			}
			_ctx.stop = _input.Lt(-1);
			State = 123;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					_localctx.t = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 117;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 118; Match(LeftBracket);
					State = 119; Match(RightBracket);
					 _localctx.typeNode =  nodeFactory.CreateTypeNodeArrayOfType(_localctx, _localctx.t.typeNode.Type); 
					}
					} 
				}
				State = 125;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public PrimitiveType primitive;
		public ITerminalNode String() { return GetToken(MParser.String, 0); }
		public ITerminalNode Bool() { return GetToken(MParser.Bool, 0); }
		public ITerminalNode Double() { return GetToken(MParser.Double, 0); }
		public ITerminalNode Int() { return GetToken(MParser.Int, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_primitiveType);
		try {
			State = 134;
			switch (_input.La(1)) {
			case Int:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126; Match(Int);
				 _localctx.primitive =  PrimitiveType.Int; 
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128; Match(String);
				 _localctx.primitive =  PrimitiveType.String; 
				}
				break;
			case Double:
				EnterOuterAlt(_localctx, 3);
				{
				State = 130; Match(Double);
				 _localctx.primitive =  PrimitiveType.Double; 
				}
				break;
			case Bool:
				EnterOuterAlt(_localctx, 4);
				{
				State = 132; Match(Bool);
				 _localctx.primitive =  PrimitiveType.Boolean; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementOrBlockContext : ParserRuleContext {
		public List<StatementNode> stmts;
		public StatementBlockContext _statementBlock;
		public StatementContext _statement;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public StatementOrBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementOrBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterStatementOrBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitStatementOrBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementOrBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementOrBlockContext statementOrBlock() {
		StatementOrBlockContext _localctx = new StatementOrBlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_statementOrBlock);
		try {
			State = 142;
			switch (_input.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; _localctx._statementBlock = statementBlock();
				 _localctx.stmts =  _localctx._statementBlock.stmts; 
				}
				break;
			case Break:
			case Int:
			case If:
			case For:
			case Return:
			case New:
			case Double:
			case String:
			case While:
			case Bool:
			case True:
			case False:
			case LeftParen:
			case Minus:
			case Not:
			case Identifier:
			case IntegerConstant:
			case DoubleConstant:
			case StringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; _localctx._statement = statement();
				 _localctx.stmts =  _localctx._statement.stmts; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public List<StatementNode> stmts;
		public StatementContext _statement;
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public ITerminalNode RightBrace() { return GetToken(MParser.RightBrace, 0); }
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode LeftBrace() { return GetToken(MParser.LeftBrace, 0); }
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_statementBlock);
		 _localctx.stmts =  new List<StatementNode>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(LeftBrace);
			State = 150;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Break) | (1L << Int) | (1L << If) | (1L << For) | (1L << Return) | (1L << New) | (1L << Double) | (1L << String) | (1L << While) | (1L << Bool) | (1L << True) | (1L << False) | (1L << LeftParen) | (1L << Minus) | (1L << Not) | (1L << Identifier) | (1L << IntegerConstant) | (1L << DoubleConstant) | (1L << StringConstant))) != 0)) {
				{
				{
				State = 145; _localctx._statement = statement();
				 _localctx.stmts.AddRange(_localctx._statement.stmts); 
				}
				}
				State = 152;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 153; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public List<StatementNode> stmts;
		public ExpressionContext _expression;
		public IfStatementContext _ifStatement;
		public WhileStatementContext _whileStatement;
		public ForStatementContext _forStatement;
		public ReturnStatementContext _returnStatement;
		public BreakStatementContext _breakStatement;
		public VariableDeclerationContext _variableDecleration;
		public ITerminalNode Semi() { return GetToken(MParser.Semi, 0); }
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public VariableDeclerationContext variableDecleration() {
			return GetRuleContext<VariableDeclerationContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_statement);
		 _localctx.stmts =  new List<StatementNode>(); 
		try {
			State = 177;
			switch (_input.La(1)) {
			case New:
			case True:
			case False:
			case LeftParen:
			case Minus:
			case Not:
			case Identifier:
			case IntegerConstant:
			case DoubleConstant:
			case StringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155; _localctx._expression = expression(0);
				State = 156; Match(Semi);
				_localctx.stmts.Add(nodeFactory.CreateExpressionStatement(_localctx, _localctx._expression.expr)); 
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; _localctx._ifStatement = ifStatement();
				 _localctx.stmts.Add(_localctx._ifStatement.stmt); 
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 3);
				{
				State = 162; _localctx._whileStatement = whileStatement();
				 _localctx.stmts.Add(_localctx._whileStatement.stmt); 
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 4);
				{
				State = 165; _localctx._forStatement = forStatement();
				 _localctx.stmts.Add(_localctx._forStatement.stmt); 
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 5);
				{
				State = 168; _localctx._returnStatement = returnStatement();
				 _localctx.stmts.Add(_localctx._returnStatement.stmt); 
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 6);
				{
				State = 171; _localctx._breakStatement = breakStatement();
				 _localctx.stmts.Add(_localctx._breakStatement.stmt); 
				}
				break;
			case Int:
			case Double:
			case String:
			case Bool:
				EnterOuterAlt(_localctx, 7);
				{
				State = 174; _localctx._variableDecleration = variableDecleration();
				 _localctx.stmts.Add(_localctx._variableDecleration.decleration); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfStatement stmt;
		public ExpressionContext _expression;
		public StatementOrBlockContext body;
		public StatementOrBlockContext els;
		public StatementOrBlockContext statementOrBlock(int i) {
			return GetRuleContext<StatementOrBlockContext>(i);
		}
		public ITerminalNode LeftParen() { return GetToken(MParser.LeftParen, 0); }
		public ITerminalNode Else() { return GetToken(MParser.Else, 0); }
		public ITerminalNode RightParen() { return GetToken(MParser.RightParen, 0); }
		public IReadOnlyList<StatementOrBlockContext> statementOrBlock() {
			return GetRuleContexts<StatementOrBlockContext>();
		}
		public ITerminalNode If() { return GetToken(MParser.If, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_ifStatement);
		try {
			State = 195;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179; Match(If);
				State = 180; Match(LeftParen);
				State = 181; _localctx._expression = expression(0);
				State = 182; Match(RightParen);
				State = 183; _localctx.body = statementOrBlock();
				State = 184; Match(Else);
				State = 185; _localctx.els = statementOrBlock();
				 _localctx.stmt =  nodeFactory.CreateIfStatement(_localctx, _localctx._expression.expr, _localctx.body.stmts, _localctx.els.stmts); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; Match(If);
				State = 189; Match(LeftParen);
				State = 190; _localctx._expression = expression(0);
				State = 191; Match(RightParen);
				State = 192; _localctx.body = statementOrBlock();
				 _localctx.stmt =  nodeFactory.CreateIfStatement(_localctx, _localctx._expression.expr, _localctx.body.stmts); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public WhileStatement stmt;
		public ExpressionContext _expression;
		public StatementOrBlockContext _statementOrBlock;
		public ITerminalNode While() { return GetToken(MParser.While, 0); }
		public ITerminalNode LeftParen() { return GetToken(MParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(MParser.RightParen, 0); }
		public StatementOrBlockContext statementOrBlock() {
			return GetRuleContext<StatementOrBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(While);
			State = 198; Match(LeftParen);
			State = 199; _localctx._expression = expression(0);
			State = 200; Match(RightParen);
			State = 201; _localctx._statementOrBlock = statementOrBlock();
			 _localctx.stmt =  nodeFactory.CreateWhileStatement(_localctx, _localctx._expression.expr, _localctx._statementOrBlock.stmts); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ForStatement stmt;
		public ExpressionContext init;
		public ExpressionContext cond;
		public ExpressionContext after;
		public StatementOrBlockContext _statementOrBlock;
		public ITerminalNode For() { return GetToken(MParser.For, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ITerminalNode> Semi() { return GetTokens(MParser.Semi); }
		public ITerminalNode LeftParen() { return GetToken(MParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(MParser.RightParen, 0); }
		public StatementOrBlockContext statementOrBlock() {
			return GetRuleContext<StatementOrBlockContext>(0);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode Semi(int i) {
			return GetToken(MParser.Semi, i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_forStatement);
		try {
			State = 225;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204; Match(For);
				State = 205; Match(LeftParen);
				State = 206; _localctx.init = expression(0);
				State = 207; Match(Semi);
				State = 208; _localctx.cond = expression(0);
				State = 209; Match(Semi);
				State = 210; _localctx.after = expression(0);
				State = 211; Match(RightParen);
				State = 212; _localctx._statementOrBlock = statementOrBlock();
				 _localctx.stmt =  nodeFactory.CreateForStatement(_localctx, _localctx.init.expr, _localctx.cond.expr, _localctx.after.expr, _localctx._statementOrBlock.stmts); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; Match(For);
				State = 216; Match(LeftParen);
				State = 217; _localctx.init = expression(0);
				State = 218; Match(Semi);
				State = 219; _localctx.cond = expression(0);
				State = 220; Match(Semi);
				State = 221; Match(RightParen);
				State = 222; _localctx._statementOrBlock = statementOrBlock();
				 _localctx.stmt =  nodeFactory.CreateForStatement(_localctx, _localctx.init.expr, _localctx.cond.expr, null, _localctx._statementOrBlock.stmts); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ReturnStatement stmt;
		public ExpressionContext _expression;
		public ITerminalNode Semi() { return GetToken(MParser.Semi, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Return() { return GetToken(MParser.Return, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_returnStatement);
		try {
			State = 235;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227; Match(Return);
				State = 228; _localctx._expression = expression(0);
				State = 229; Match(Semi);
				 _localctx.stmt =  nodeFactory.CreateReturnStatement(_localctx, _localctx._expression.expr); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232; Match(Return);
				State = 233; Match(Semi);
				 _localctx.stmt =  nodeFactory.CreateReturnStatement(_localctx); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public BreakStatement stmt;
		public ITerminalNode Semi() { return GetToken(MParser.Semi, 0); }
		public ITerminalNode Break() { return GetToken(MParser.Break, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(Break);
			State = 238; Match(Semi);
			 _localctx.stmt =  nodeFactory.CreateBreakStatement(_localctx); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionNode expr;
		public ExpressionContext name;
		public ExpressionContext left;
		public ExpressionContext right;
		public CoreExpressionContext _coreExpression;
		public FunctionCallContext _functionCall;
		public CreatorContext _creator;
		public ExpressionContext indx;
		public ITerminalNode Less() { return GetToken(MParser.Less, 0); }
		public ITerminalNode NotEqual() { return GetToken(MParser.NotEqual, 0); }
		public ITerminalNode Div() { return GetToken(MParser.Div, 0); }
		public ITerminalNode LeftBracket() { return GetToken(MParser.LeftBracket, 0); }
		public ITerminalNode Not() { return GetToken(MParser.Not, 0); }
		public ITerminalNode Star() { return GetToken(MParser.Star, 0); }
		public ITerminalNode AndAnd() { return GetToken(MParser.AndAnd, 0); }
		public ITerminalNode Greater() { return GetToken(MParser.Greater, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode StarStar() { return GetToken(MParser.StarStar, 0); }
		public ITerminalNode OrOr() { return GetToken(MParser.OrOr, 0); }
		public ITerminalNode Minus() { return GetToken(MParser.Minus, 0); }
		public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		public ITerminalNode RightBracket() { return GetToken(MParser.RightBracket, 0); }
		public ITerminalNode Mod() { return GetToken(MParser.Mod, 0); }
		public ITerminalNode LessEqual() { return GetToken(MParser.LessEqual, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Plus() { return GetToken(MParser.Plus, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CoreExpressionContext coreExpression() {
			return GetRuleContext<CoreExpressionContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(MParser.Assign, 0); }
		public ITerminalNode Equal() { return GetToken(MParser.Equal, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(MParser.GreaterEqual, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		 BinaryOperator op = BinaryOperator.Multiply; 
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 242; Match(Minus);
				State = 243; _localctx.right = expression(9);
				 _localctx.expr =  nodeFactory.CreateUnaryExpression(_localctx, UnaryOperator.Negation, _localctx.right.expr); 
				}
				break;

			case 2:
				{
				State = 246; Match(Not);
				State = 247; _localctx.right = expression(2);
				 _localctx.expr =  nodeFactory.CreateUnaryExpression(_localctx, UnaryOperator.Not, _localctx.right.expr); 
				}
				break;

			case 3:
				{
				State = 250; _localctx._coreExpression = coreExpression();
				 _localctx.expr =   _localctx._coreExpression.expr; 
				}
				break;

			case 4:
				{
				State = 253; _localctx._functionCall = functionCall();
				 _localctx.expr =  _localctx._functionCall.expr; 
				}
				break;

			case 5:
				{
				State = 256; _localctx._creator = creator();
				 _localctx.expr =  _localctx._creator.expr; 
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 335;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 333;
					switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 261;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 262; Match(StarStar);
						State = 263; _localctx.right = expression(11);
						 _localctx.expr =  nodeFactory.CreateBinaryOperatorExpression(_localctx, _localctx.left.expr, _localctx.right.expr, BinaryOperator.Exponensiation); 
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 266;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 273;
						switch (_input.La(1)) {
						case Star:
							{
							State = 267; Match(Star);
							 op = BinaryOperator.Multiply; 
							}
							break;
						case Div:
							{
							State = 269; Match(Div);
							 op = BinaryOperator.Divide; 
							}
							break;
						case Mod:
							{
							State = 271; Match(Mod);
							 op = BinaryOperator.Mod; 
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 275; _localctx.right = expression(9);
						 _localctx.expr =  nodeFactory.CreateBinaryOperatorExpression(_localctx, _localctx.left.expr, _localctx.right.expr, op); 
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 278;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 283;
						switch (_input.La(1)) {
						case Plus:
							{
							State = 279; Match(Plus);
							 op = BinaryOperator.Add; 
							}
							break;
						case Minus:
							{
							State = 281; Match(Minus);
							 op = BinaryOperator.Subtract; 
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 285; _localctx.right = expression(8);
						 _localctx.expr =  nodeFactory.CreateBinaryOperatorExpression(_localctx, _localctx.left.expr, _localctx.right.expr, op); 
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 288;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 297;
						switch (_input.La(1)) {
						case Less:
							{
							State = 289; Match(Less);
							 op = BinaryOperator.Less; 
							}
							break;
						case LessEqual:
							{
							State = 291; Match(LessEqual);
							 op = BinaryOperator.LessEqual; 
							}
							break;
						case Greater:
							{
							State = 293; Match(Greater);
							 op = BinaryOperator.Greater; 
							}
							break;
						case GreaterEqual:
							{
							State = 295; Match(GreaterEqual);
							 op = BinaryOperator.GreaterEqual; 
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 299; _localctx.right = expression(7);
						 _localctx.expr =  nodeFactory.CreateBinaryOperatorExpression(_localctx, _localctx.left.expr, _localctx.right.expr, op); 
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 302;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 307;
						switch (_input.La(1)) {
						case NotEqual:
							{
							State = 303; Match(NotEqual);
							 op = BinaryOperator.NotEqual; 
							}
							break;
						case Equal:
							{
							State = 305; Match(Equal);
							 op = BinaryOperator.Equal; 
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 309; _localctx.right = expression(6);
						 _localctx.expr =  nodeFactory.CreateBinaryOperatorExpression(_localctx, _localctx.left.expr, _localctx.right.expr, op); 
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 312;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 313; Match(AndAnd);
						State = 314; _localctx.right = expression(5);
						 _localctx.expr =  nodeFactory.CreateBinaryOperatorExpression(_localctx, _localctx.left.expr, _localctx.right.expr, BinaryOperator.And); 
						}
						break;

					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 317;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 318; Match(OrOr);
						State = 319; _localctx.right = expression(4);
						 _localctx.expr =  nodeFactory.CreateBinaryOperatorExpression(_localctx, _localctx.left.expr, _localctx.right.expr, BinaryOperator.Or); 
						}
						break;

					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 322;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 323; Match(Assign);
						State = 324; _localctx.right = expression(1);
						 _localctx.expr =  nodeFactory.CreateAssignmentExpression(_localctx, _localctx.left.expr, _localctx.right.expr); 
						}
						break;

					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.name = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 327;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 328; Match(LeftBracket);
						State = 329; _localctx.indx = expression(0);
						State = 330; Match(RightBracket);
						 _localctx.expr =  nodeFactory.CreateIndexerExpression(_localctx, _localctx.name.expr, _localctx.indx.expr); 
						}
						break;
					}
					} 
				}
				State = 337;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CoreExpressionContext : ParserRuleContext {
		public ExpressionNode expr;
		public ExpressionContext _expression;
		public ConstantContext _constant;
		public IToken _Identifier;
		public ITerminalNode LeftParen() { return GetToken(MParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(MParser.RightParen, 0); }
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public CoreExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coreExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterCoreExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitCoreExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoreExpressionContext coreExpression() {
		CoreExpressionContext _localctx = new CoreExpressionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_coreExpression);
		try {
			State = 348;
			switch (_input.La(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338; Match(LeftParen);
				State = 339; _localctx._expression = expression(0);
				State = 340; Match(RightParen);
				 _localctx.expr =  _localctx._expression.expr; 
				}
				break;
			case True:
			case False:
			case IntegerConstant:
			case DoubleConstant:
			case StringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; _localctx._constant = constant();
				 _localctx.expr =  nodeFactory.CreateConstantExpression(_localctx, _localctx._constant.@const); 
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 346; _localctx._Identifier = Match(Identifier);
				 _localctx.expr =  nodeFactory.CreateVariableExpression(_localctx, nodeFactory.CreateVariableIdNode(_localctx, (_localctx._Identifier!=null?_localctx._Identifier.Text:null)));  
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		public CreatorExpression expr;
		public PrimitiveTypeContext _primitiveType;
		public CreatorSizesContext _creatorSizes;
		public CreatorSizesContext creatorSizes() {
			return GetRuleContext<CreatorSizesContext>(0);
		}
		public ITerminalNode New() { return GetToken(MParser.New, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_creator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(New);
			State = 351; _localctx._primitiveType = primitiveType();
			State = 352; _localctx._creatorSizes = creatorSizes();
			 _localctx.expr =  nodeFactory.CreateArrayCreatorExpression(_localctx, _localctx._primitiveType.primitive, _localctx._creatorSizes.sizes ); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorSizesContext : ParserRuleContext {
		public List<ExpressionNode> sizes;
		public ExpressionContext first;
		public ExpressionContext _expression;
		public IReadOnlyList<ITerminalNode> RightBracket() { return GetTokens(MParser.RightBracket); }
		public ITerminalNode LeftBracket(int i) {
			return GetToken(MParser.LeftBracket, i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightBracket(int i) {
			return GetToken(MParser.RightBracket, i);
		}
		public IReadOnlyList<ITerminalNode> LeftBracket() { return GetTokens(MParser.LeftBracket); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public CreatorSizesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creatorSizes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterCreatorSizes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitCreatorSizes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreatorSizes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatorSizesContext creatorSizes() {
		CreatorSizesContext _localctx = new CreatorSizesContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_creatorSizes);
		 _localctx.sizes =  new List<ExpressionNode>(); 
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(LeftBracket);
			State = 356; _localctx.first = _localctx._expression = expression(0);
			State = 357; Match(RightBracket);
			State = 365;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 358; Match(LeftBracket);
					State = 359; _localctx._expression = expression(0);
					State = 360; Match(RightBracket);
					 _localctx.sizes.Add(_localctx._expression.expr); 
					}
					} 
				}
				State = 367;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			}
			 _localctx.sizes.Add(_localctx.first.expr); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallExpression expr;
		public IToken _Identifier;
		public ArgumentsContext _arguments;
		public ITerminalNode LeftParen() { return GetToken(MParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(MParser.RightParen, 0); }
		public ITerminalNode Identifier() { return GetToken(MParser.Identifier, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_functionCall);
		try {
			State = 380;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 370; _localctx._Identifier = Match(Identifier);
				State = 371; Match(LeftParen);
				State = 372; _localctx._arguments = arguments();
				State = 373; Match(RightParen);
				 _localctx.expr =  nodeFactory.CreateFunctionCallExpression(_localctx, (_localctx._Identifier!=null?_localctx._Identifier.Text:null), _localctx._arguments.args ); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 376; _localctx._Identifier = Match(Identifier);
				State = 377; Match(LeftParen);
				State = 378; Match(RightParen);
				 _localctx.expr =  nodeFactory.CreateFunctionCallExpression(_localctx, (_localctx._Identifier!=null?_localctx._Identifier.Text:null), new List<ExpressionNode>() ); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public List<ExpressionNode> args;
		public ExpressionContext first;
		public ExpressionContext _expression;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode Comma(int i) {
			return GetToken(MParser.Comma, i);
		}
		public IReadOnlyList<ITerminalNode> Comma() { return GetTokens(MParser.Comma); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_arguments);
		 _localctx.args =  new List<ExpressionNode>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; _localctx.first = _localctx._expression = expression(0);
			 _localctx.args.Add(_localctx.first.expr); 
			State = 390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Comma) {
				{
				{
				State = 384; Match(Comma);
				State = 385; _localctx._expression = expression(0);
				 _localctx.args.Add(_localctx._expression.expr); 
				}
				}
				State = 392;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ConstantNode @const;
		public IToken _IntegerConstant;
		public IToken _StringConstant;
		public IToken _DoubleConstant;
		public ITerminalNode False() { return GetToken(MParser.False, 0); }
		public ITerminalNode IntegerConstant() { return GetToken(MParser.IntegerConstant, 0); }
		public ITerminalNode True() { return GetToken(MParser.True, 0); }
		public ITerminalNode DoubleConstant() { return GetToken(MParser.DoubleConstant, 0); }
		public ITerminalNode StringConstant() { return GetToken(MParser.StringConstant, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMParserListener typedListener = listener as IMParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMParserVisitor<TResult> typedVisitor = visitor as IMParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_constant);
		try {
			State = 403;
			switch (_input.La(1)) {
			case IntegerConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 393; _localctx._IntegerConstant = Match(IntegerConstant);
				 _localctx.@const =  nodeFactory.CreateIntegerConstant(_localctx, (_localctx._IntegerConstant!=null?_localctx._IntegerConstant.Text:null)); 
				}
				break;
			case StringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395; _localctx._StringConstant = Match(StringConstant);
				 _localctx.@const =  nodeFactory.CreateStringConstant(_localctx, (_localctx._StringConstant!=null?_localctx._StringConstant.Text:null)); 
				}
				break;
			case DoubleConstant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 397; _localctx._DoubleConstant = Match(DoubleConstant);
				{ _localctx.@const =  nodeFactory.CreateDoubleConstant(_localctx, (_localctx._DoubleConstant!=null?_localctx._DoubleConstant.Text:null)); } 
				}
				break;
			case True:
				EnterOuterAlt(_localctx, 4);
				{
				State = 399; Match(True);
				 _localctx.@const =  nodeFactory.CreateBooleanConstant(_localctx, true); 
				}
				break;
			case False:
				EnterOuterAlt(_localctx, 5);
				{
				State = 401; Match(False);
				 _localctx.@const =  nodeFactory.CreateBooleanConstant(_localctx, false); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return type_sempred((TypeContext)_localctx, predIndex);

		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 10);

		case 2: return Precpred(_ctx, 8);

		case 3: return Precpred(_ctx, 7);

		case 4: return Precpred(_ctx, 6);

		case 5: return Precpred(_ctx, 5);

		case 6: return Precpred(_ctx, 4);

		case 7: return Precpred(_ctx, 3);

		case 8: return Precpred(_ctx, 1);

		case 9: return Precpred(_ctx, 13);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3/\x198\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x3\x2\x3\x2\x3\x2\x6\x2\x32\n\x2\r\x2\xE\x2"+
		"\x33\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3V\n\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4]\n\x4\f\x4\xE\x4`\v\x4\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5n\n"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a"+
		"\a|\n\a\f\a\xE\a\x7F\v\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b"+
		"\x89\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x91\n\t\x3\n\x3\n\x3\n\x3"+
		"\n\a\n\x97\n\n\f\n\xE\n\x9A\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x5\v\xB4\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xC6\n\f\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x5\xE\xE4\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF"+
		"\xEE\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\x106\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x114\n\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x11E\n"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\x12C\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\x136\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a"+
		"\x11\x150\n\x11\f\x11\xE\x11\x153\v\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x15F\n\x12\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\a\x14\x16E\n\x14\f\x14\xE\x14\x171\v\x14\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15"+
		"\x17F\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x187\n\x16"+
		"\f\x16\xE\x16\x18A\v\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x5\x17\x196\n\x17\x3\x17\x2\x2\x4\f \x18\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2\x2\x2\x1B3\x2\x31\x3"+
		"\x2\x2\x2\x4U\x3\x2\x2\x2\x6W\x3\x2\x2\x2\bm\x3\x2\x2\x2\no\x3\x2\x2\x2"+
		"\fs\x3\x2\x2\x2\xE\x88\x3\x2\x2\x2\x10\x90\x3\x2\x2\x2\x12\x92\x3\x2\x2"+
		"\x2\x14\xB3\x3\x2\x2\x2\x16\xC5\x3\x2\x2\x2\x18\xC7\x3\x2\x2\x2\x1A\xE3"+
		"\x3\x2\x2\x2\x1C\xED\x3\x2\x2\x2\x1E\xEF\x3\x2\x2\x2 \x105\x3\x2\x2\x2"+
		"\"\x15E\x3\x2\x2\x2$\x160\x3\x2\x2\x2&\x165\x3\x2\x2\x2(\x17E\x3\x2\x2"+
		"\x2*\x180\x3\x2\x2\x2,\x195\x3\x2\x2\x2./\x5\x4\x3\x2/\x30\b\x2\x1\x2"+
		"\x30\x32\x3\x2\x2\x2\x31.\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x31\x3\x2"+
		"\x2\x2\x33\x34\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x36\a\x2\x2\x3\x36"+
		"\x3\x3\x2\x2\x2\x37\x38\a\x4\x2\x2\x38\x39\a)\x2\x2\x39:\a\x11\x2\x2:"+
		";\x5\x6\x4\x2;<\a\x12\x2\x2<=\x5\x12\n\x2=>\b\x3\x1\x2>V\x3\x2\x2\x2?"+
		"@\a\x4\x2\x2@\x41\a)\x2\x2\x41\x42\a\x11\x2\x2\x42\x43\a\x12\x2\x2\x43"+
		"\x44\x5\x12\n\x2\x44\x45\b\x3\x1\x2\x45V\x3\x2\x2\x2\x46G\x5\f\a\x2GH"+
		"\a)\x2\x2HI\a\x11\x2\x2IJ\x5\x6\x4\x2JK\a\x12\x2\x2KL\x5\x12\n\x2LM\b"+
		"\x3\x1\x2MV\x3\x2\x2\x2NO\x5\f\a\x2OP\a)\x2\x2PQ\a\x11\x2\x2QR\a\x12\x2"+
		"\x2RS\x5\x12\n\x2ST\b\x3\x1\x2TV\x3\x2\x2\x2U\x37\x3\x2\x2\x2U?\x3\x2"+
		"\x2\x2U\x46\x3\x2\x2\x2UN\x3\x2\x2\x2V\x5\x3\x2\x2\x2W^\x5\n\x6\x2XY\a"+
		"\'\x2\x2YZ\x5\n\x6\x2Z[\b\x4\x1\x2[]\x3\x2\x2\x2\\X\x3\x2\x2\x2]`\x3\x2"+
		"\x2\x2^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_\x61\x3\x2\x2\x2`^\x3\x2\x2\x2\x61"+
		"\x62\b\x4\x1\x2\x62\a\x3\x2\x2\x2\x63\x64\x5\n\x6\x2\x64\x65\a(\x2\x2"+
		"\x65\x66\x5 \x11\x2\x66g\a&\x2\x2gh\b\x5\x1\x2hn\x3\x2\x2\x2ij\x5\n\x6"+
		"\x2jk\a&\x2\x2kl\b\x5\x1\x2ln\x3\x2\x2\x2m\x63\x3\x2\x2\x2mi\x3\x2\x2"+
		"\x2n\t\x3\x2\x2\x2op\x5\f\a\x2pq\a)\x2\x2qr\b\x6\x1\x2r\v\x3\x2\x2\x2"+
		"st\b\a\x1\x2tu\x5\xE\b\x2uv\b\a\x1\x2v}\x3\x2\x2\x2wx\f\x3\x2\x2xy\a\x15"+
		"\x2\x2yz\a\x16\x2\x2z|\b\a\x1\x2{w\x3\x2\x2\x2|\x7F\x3\x2\x2\x2}{\x3\x2"+
		"\x2\x2}~\x3\x2\x2\x2~\r\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x80\x81\a\x5\x2\x2"+
		"\x81\x89\b\b\x1\x2\x82\x83\a\f\x2\x2\x83\x89\b\b\x1\x2\x84\x85\a\v\x2"+
		"\x2\x85\x89\b\b\x1\x2\x86\x87\a\xE\x2\x2\x87\x89\b\b\x1\x2\x88\x80\x3"+
		"\x2\x2\x2\x88\x82\x3\x2\x2\x2\x88\x84\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2"+
		"\x89\xF\x3\x2\x2\x2\x8A\x8B\x5\x12\n\x2\x8B\x8C\b\t\x1\x2\x8C\x91\x3\x2"+
		"\x2\x2\x8D\x8E\x5\x14\v\x2\x8E\x8F\b\t\x1\x2\x8F\x91\x3\x2\x2\x2\x90\x8A"+
		"\x3\x2\x2\x2\x90\x8D\x3\x2\x2\x2\x91\x11\x3\x2\x2\x2\x92\x98\a\x13\x2"+
		"\x2\x93\x94\x5\x14\v\x2\x94\x95\b\n\x1\x2\x95\x97\x3\x2\x2\x2\x96\x93"+
		"\x3\x2\x2\x2\x97\x9A\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2"+
		"\x2\x99\x9B\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9B\x9C\a\x14\x2\x2\x9C\x13"+
		"\x3\x2\x2\x2\x9D\x9E\x5 \x11\x2\x9E\x9F\a&\x2\x2\x9F\xA0\b\v\x1\x2\xA0"+
		"\xB4\x3\x2\x2\x2\xA1\xA2\x5\x16\f\x2\xA2\xA3\b\v\x1\x2\xA3\xB4\x3\x2\x2"+
		"\x2\xA4\xA5\x5\x18\r\x2\xA5\xA6\b\v\x1\x2\xA6\xB4\x3\x2\x2\x2\xA7\xA8"+
		"\x5\x1A\xE\x2\xA8\xA9\b\v\x1\x2\xA9\xB4\x3\x2\x2\x2\xAA\xAB\x5\x1C\xF"+
		"\x2\xAB\xAC\b\v\x1\x2\xAC\xB4\x3\x2\x2\x2\xAD\xAE\x5\x1E\x10\x2\xAE\xAF"+
		"\b\v\x1\x2\xAF\xB4\x3\x2\x2\x2\xB0\xB1\x5\b\x5\x2\xB1\xB2\b\v\x1\x2\xB2"+
		"\xB4\x3\x2\x2\x2\xB3\x9D\x3\x2\x2\x2\xB3\xA1\x3\x2\x2\x2\xB3\xA4\x3\x2"+
		"\x2\x2\xB3\xA7\x3\x2\x2\x2\xB3\xAA\x3\x2\x2\x2\xB3\xAD\x3\x2\x2\x2\xB3"+
		"\xB0\x3\x2\x2\x2\xB4\x15\x3\x2\x2\x2\xB5\xB6\a\x6\x2\x2\xB6\xB7\a\x11"+
		"\x2\x2\xB7\xB8\x5 \x11\x2\xB8\xB9\a\x12\x2\x2\xB9\xBA\x5\x10\t\x2\xBA"+
		"\xBB\a\a\x2\x2\xBB\xBC\x5\x10\t\x2\xBC\xBD\b\f\x1\x2\xBD\xC6\x3\x2\x2"+
		"\x2\xBE\xBF\a\x6\x2\x2\xBF\xC0\a\x11\x2\x2\xC0\xC1\x5 \x11\x2\xC1\xC2"+
		"\a\x12\x2\x2\xC2\xC3\x5\x10\t\x2\xC3\xC4\b\f\x1\x2\xC4\xC6\x3\x2\x2\x2"+
		"\xC5\xB5\x3\x2\x2\x2\xC5\xBE\x3\x2\x2\x2\xC6\x17\x3\x2\x2\x2\xC7\xC8\a"+
		"\r\x2\x2\xC8\xC9\a\x11\x2\x2\xC9\xCA\x5 \x11\x2\xCA\xCB\a\x12\x2\x2\xCB"+
		"\xCC\x5\x10\t\x2\xCC\xCD\b\r\x1\x2\xCD\x19\x3\x2\x2\x2\xCE\xCF\a\b\x2"+
		"\x2\xCF\xD0\a\x11\x2\x2\xD0\xD1\x5 \x11\x2\xD1\xD2\a&\x2\x2\xD2\xD3\x5"+
		" \x11\x2\xD3\xD4\a&\x2\x2\xD4\xD5\x5 \x11\x2\xD5\xD6\a\x12\x2\x2\xD6\xD7"+
		"\x5\x10\t\x2\xD7\xD8\b\xE\x1\x2\xD8\xE4\x3\x2\x2\x2\xD9\xDA\a\b\x2\x2"+
		"\xDA\xDB\a\x11\x2\x2\xDB\xDC\x5 \x11\x2\xDC\xDD\a&\x2\x2\xDD\xDE\x5 \x11"+
		"\x2\xDE\xDF\a&\x2\x2\xDF\xE0\a\x12\x2\x2\xE0\xE1\x5\x10\t\x2\xE1\xE2\b"+
		"\xE\x1\x2\xE2\xE4\x3\x2\x2\x2\xE3\xCE\x3\x2\x2\x2\xE3\xD9\x3\x2\x2\x2"+
		"\xE4\x1B\x3\x2\x2\x2\xE5\xE6\a\t\x2\x2\xE6\xE7\x5 \x11\x2\xE7\xE8\a&\x2"+
		"\x2\xE8\xE9\b\xF\x1\x2\xE9\xEE\x3\x2\x2\x2\xEA\xEB\a\t\x2\x2\xEB\xEC\a"+
		"&\x2\x2\xEC\xEE\b\xF\x1\x2\xED\xE5\x3\x2\x2\x2\xED\xEA\x3\x2\x2\x2\xEE"+
		"\x1D\x3\x2\x2\x2\xEF\xF0\a\x3\x2\x2\xF0\xF1\a&\x2\x2\xF1\xF2\b\x10\x1"+
		"\x2\xF2\x1F\x3\x2\x2\x2\xF3\xF4\b\x11\x1\x2\xF4\xF5\a\x1E\x2\x2\xF5\xF6"+
		"\x5 \x11\v\xF6\xF7\b\x11\x1\x2\xF7\x106\x3\x2\x2\x2\xF8\xF9\a%\x2\x2\xF9"+
		"\xFA\x5 \x11\x4\xFA\xFB\b\x11\x1\x2\xFB\x106\x3\x2\x2\x2\xFC\xFD\x5\""+
		"\x12\x2\xFD\xFE\b\x11\x1\x2\xFE\x106\x3\x2\x2\x2\xFF\x100\x5(\x15\x2\x100"+
		"\x101\b\x11\x1\x2\x101\x106\x3\x2\x2\x2\x102\x103\x5$\x13\x2\x103\x104"+
		"\b\x11\x1\x2\x104\x106\x3\x2\x2\x2\x105\xF3\x3\x2\x2\x2\x105\xF8\x3\x2"+
		"\x2\x2\x105\xFC\x3\x2\x2\x2\x105\xFF\x3\x2\x2\x2\x105\x102\x3\x2\x2\x2"+
		"\x106\x151\x3\x2\x2\x2\x107\x108\f\f\x2\x2\x108\x109\a \x2\x2\x109\x10A"+
		"\x5 \x11\r\x10A\x10B\b\x11\x1\x2\x10B\x150\x3\x2\x2\x2\x10C\x113\f\n\x2"+
		"\x2\x10D\x10E\a\x1F\x2\x2\x10E\x114\b\x11\x1\x2\x10F\x110\a!\x2\x2\x110"+
		"\x114\b\x11\x1\x2\x111\x112\a\"\x2\x2\x112\x114\b\x11\x1\x2\x113\x10D"+
		"\x3\x2\x2\x2\x113\x10F\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x114\x115\x3"+
		"\x2\x2\x2\x115\x116\x5 \x11\v\x116\x117\b\x11\x1\x2\x117\x150\x3\x2\x2"+
		"\x2\x118\x11D\f\t\x2\x2\x119\x11A\a\x1D\x2\x2\x11A\x11E\b\x11\x1\x2\x11B"+
		"\x11C\a\x1E\x2\x2\x11C\x11E\b\x11\x1\x2\x11D\x119\x3\x2\x2\x2\x11D\x11B"+
		"\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x120\x5 \x11\n\x120\x121\b\x11"+
		"\x1\x2\x121\x150\x3\x2\x2\x2\x122\x12B\f\b\x2\x2\x123\x124\a\x17\x2\x2"+
		"\x124\x12C\b\x11\x1\x2\x125\x126\a\x18\x2\x2\x126\x12C\b\x11\x1\x2\x127"+
		"\x128\a\x19\x2\x2\x128\x12C\b\x11\x1\x2\x129\x12A\a\x1A\x2\x2\x12A\x12C"+
		"\b\x11\x1\x2\x12B\x123\x3\x2\x2\x2\x12B\x125\x3\x2\x2\x2\x12B\x127\x3"+
		"\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x12E\x5 \x11"+
		"\t\x12E\x12F\b\x11\x1\x2\x12F\x150\x3\x2\x2\x2\x130\x135\f\a\x2\x2\x131"+
		"\x132\a\x1C\x2\x2\x132\x136\b\x11\x1\x2\x133\x134\a\x1B\x2\x2\x134\x136"+
		"\b\x11\x1\x2\x135\x131\x3\x2\x2\x2\x135\x133\x3\x2\x2\x2\x136\x137\x3"+
		"\x2\x2\x2\x137\x138\x5 \x11\b\x138\x139\b\x11\x1\x2\x139\x150\x3\x2\x2"+
		"\x2\x13A\x13B\f\x6\x2\x2\x13B\x13C\a#\x2\x2\x13C\x13D\x5 \x11\a\x13D\x13E"+
		"\b\x11\x1\x2\x13E\x150\x3\x2\x2\x2\x13F\x140\f\x5\x2\x2\x140\x141\a$\x2"+
		"\x2\x141\x142\x5 \x11\x6\x142\x143\b\x11\x1\x2\x143\x150\x3\x2\x2\x2\x144"+
		"\x145\f\x3\x2\x2\x145\x146\a(\x2\x2\x146\x147\x5 \x11\x3\x147\x148\b\x11"+
		"\x1\x2\x148\x150\x3\x2\x2\x2\x149\x14A\f\xF\x2\x2\x14A\x14B\a\x15\x2\x2"+
		"\x14B\x14C\x5 \x11\x2\x14C\x14D\a\x16\x2\x2\x14D\x14E\b\x11\x1\x2\x14E"+
		"\x150\x3\x2\x2\x2\x14F\x107\x3\x2\x2\x2\x14F\x10C\x3\x2\x2\x2\x14F\x118"+
		"\x3\x2\x2\x2\x14F\x122\x3\x2\x2\x2\x14F\x130\x3\x2\x2\x2\x14F\x13A\x3"+
		"\x2\x2\x2\x14F\x13F\x3\x2\x2\x2\x14F\x144\x3\x2\x2\x2\x14F\x149\x3\x2"+
		"\x2\x2\x150\x153\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2\x151\x152\x3\x2\x2"+
		"\x2\x152!\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2\x154\x155\a\x11\x2\x2\x155"+
		"\x156\x5 \x11\x2\x156\x157\a\x12\x2\x2\x157\x158\b\x12\x1\x2\x158\x15F"+
		"\x3\x2\x2\x2\x159\x15A\x5,\x17\x2\x15A\x15B\b\x12\x1\x2\x15B\x15F\x3\x2"+
		"\x2\x2\x15C\x15D\a)\x2\x2\x15D\x15F\b\x12\x1\x2\x15E\x154\x3\x2\x2\x2"+
		"\x15E\x159\x3\x2\x2\x2\x15E\x15C\x3\x2\x2\x2\x15F#\x3\x2\x2\x2\x160\x161"+
		"\a\n\x2\x2\x161\x162\x5\xE\b\x2\x162\x163\x5&\x14\x2\x163\x164\b\x13\x1"+
		"\x2\x164%\x3\x2\x2\x2\x165\x166\a\x15\x2\x2\x166\x167\x5 \x11\x2\x167"+
		"\x16F\a\x16\x2\x2\x168\x169\a\x15\x2\x2\x169\x16A\x5 \x11\x2\x16A\x16B"+
		"\a\x16\x2\x2\x16B\x16C\b\x14\x1\x2\x16C\x16E\x3\x2\x2\x2\x16D\x168\x3"+
		"\x2\x2\x2\x16E\x171\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x16F\x170\x3\x2"+
		"\x2\x2\x170\x172\x3\x2\x2\x2\x171\x16F\x3\x2\x2\x2\x172\x173\b\x14\x1"+
		"\x2\x173\'\x3\x2\x2\x2\x174\x175\a)\x2\x2\x175\x176\a\x11\x2\x2\x176\x177"+
		"\x5*\x16\x2\x177\x178\a\x12\x2\x2\x178\x179\b\x15\x1\x2\x179\x17F\x3\x2"+
		"\x2\x2\x17A\x17B\a)\x2\x2\x17B\x17C\a\x11\x2\x2\x17C\x17D\a\x12\x2\x2"+
		"\x17D\x17F\b\x15\x1\x2\x17E\x174\x3\x2\x2\x2\x17E\x17A\x3\x2\x2\x2\x17F"+
		")\x3\x2\x2\x2\x180\x181\x5 \x11\x2\x181\x188\b\x16\x1\x2\x182\x183\a\'"+
		"\x2\x2\x183\x184\x5 \x11\x2\x184\x185\b\x16\x1\x2\x185\x187\x3\x2\x2\x2"+
		"\x186\x182\x3\x2\x2\x2\x187\x18A\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x188"+
		"\x189\x3\x2\x2\x2\x189+\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18B\x18C\a"+
		"*\x2\x2\x18C\x196\b\x17\x1\x2\x18D\x18E\a,\x2\x2\x18E\x196\b\x17\x1\x2"+
		"\x18F\x190\a+\x2\x2\x190\x196\b\x17\x1\x2\x191\x192\a\xF\x2\x2\x192\x196"+
		"\b\x17\x1\x2\x193\x194\a\x10\x2\x2\x194\x196\b\x17\x1\x2\x195\x18B\x3"+
		"\x2\x2\x2\x195\x18D\x3\x2\x2\x2\x195\x18F\x3\x2\x2\x2\x195\x191\x3\x2"+
		"\x2\x2\x195\x193\x3\x2\x2\x2\x196-\x3\x2\x2\x2\x1A\x33U^m}\x88\x90\x98"+
		"\xB3\xC5\xE3\xED\x105\x113\x11D\x12B\x135\x14F\x151\x15E\x16F\x17E\x188"+
		"\x195";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Compiler.Parser.Antlr
